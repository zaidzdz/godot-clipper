name: Continuous integration
on:
  workflow_call:

env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: master
  # Used to select the version of Godot to run the tests with.
  GODOT_TEST_VERSION: master
  # Use UTF-8 on Linux.
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8

concurrency:
  group: ci-cmake-${{ github.actor }}-${{ github.head_ref || github.run_number }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      EM_VERSION: 3.1.39
      config-flags:
        -DCMAKE_C_COMPILER_LAUNCHER=sccache
        -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
        -DGODOTCPP_ENABLE_TESTING=ON
        -DGODOTCPP_BUILD_PROFILE="test/build_profile.json"
      SCCACHE_GHA_ENABLED: "true"

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux (GCC, Makefiles)
            os: ubuntu-22.04
            platform: linux
            config-flags: -DCMAKE_BUILD_TYPE=Release
            artifact-name: godot-cpp-linux-glibc2.27-x86_64-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.linux.template_release.x86_64.a
            run-tests: true

          - name: 🏁 Windows (x86_64, MSVC)
            os: windows-2022
            platform: windows
            compiler: msvc
            build-flags: --config Release
            artifact-name: godot-cpp-windows-msvc2019-x86_64-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.windows.template_release.x86_64.lib
            run-tests: false

          - name: 🏁 Windows (x86_64, MinGW, Ninja)
            os: windows-2022
            platform: windows
            compiler: mingw
            config-flags:
              -GNinja -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_CXX_COMPILER=cc -DCMAKE_CXX_COMPILER=c++
            artifact-name: godot-cpp-linux-mingw-x86_64-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.windows.template_release.x86_64.a
            run-tests: false

          - name: 🍎 macOS (universal, Makefiles)
            os: macos-latest
            platform: macos
            config-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
            artifact-name: godot-cpp-macos-universal-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.macos.template_release.universal.a
            run-tests: false

          - name: 🤖 Android (arm64, Ninja)
            os: ubuntu-22.04
            platform: android
            config-flags:
              -G Ninja -DCMAKE_BUILD_TYPE=Release
              --toolchain ${ANDROID_HOME}/ndk/23.2.8568313/build/cmake/android.toolchain.cmake
              -DANDROID_PLATFORM=21 -DANDROID_ABI=arm64-v8a
            artifact-name: godot-cpp-android-arm64-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.android.template_release.arm64.a
            flags: arch=arm64
            run-tests: false

          - name: 🍏 iOS (arm64, XCode)
            os: macos-latest
            platform: ios
            config-flags:
              -G Xcode
              --toolchain cmake/ios.toolchain.cmake
              -DPLATFORM=OS64
            build-flags: --config Release
            artifact-name: godot-cpp-ios-arm64-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.ios.template_release.arm64.a
            flags: arch=arm64
            run-tests: false

          - name: 🌐 Web (wasm32, Ninja)
            os: ubuntu-22.04
            platform: web
            config-flags:
              -G Ninja  -DCMAKE_BUILD_TYPE=Release
              --toolchain ${EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake
            artifact-name: godot-cpp-web-wasm32-release.cmake
            artifact-path: cmake-build/bin/libgodot-cpp.web.template_release.wasm32.a
            run-tests: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Setup godot-cpp
        uses: ./.github/actions/setup-godot-cpp
        with:
          platform: ${{ matrix.platform }}
          windows-compiler: ${{ matrix.compiler }}
          buildtool: cmake

      - name: Configure godot-cpp-test with template_debug
        run: >
          cmake --log-level=VERBOSE -S . -B cmake-build ${{ env.config-flags }} ${{ matrix.config-flags }}

      - name: Build godot-cpp-test (template_debug)
        run: >
          cmake --build cmake-build --verbose  --target godot-cpp-test ${{ matrix.build-flags }}

      - name: Configure godot-cpp-test with template_release
        run: >
          cmake --fresh --log-level=VERBOSE -S . -B cmake-build
          -DGODOTCPP_TARGET=template_release ${{ env.config-flags }} ${{ matrix.config-flags }}

      - name: Build godot-cpp-test (template_release)
        run: >
          cmake --build cmake-build --verbose  --target godot-cpp-test ${{ matrix.build-flags }}

      - name: Run sccache stat for check
        shell: bash
        run: ${SCCACHE_PATH} --show-stats

      - name: Download latest Godot artifacts
        uses: dsnopek/action-download-artifact@1322f74e2dac9feed2ee76a32d9ae1ca3b4cf4e9
        if: matrix.run-tests && env.GODOT_TEST_VERSION == 'master'
        with:
          repo: godotengine/godot
          branch: master
          event: push
          workflow: linux_builds.yml
          workflow_conclusion: success
          name: linux-editor-mono
          search_artifacts: true
          check_artifacts: true
          ensure_latest: true
          path: godot-artifacts

      - name: Prepare Godot artifacts for testing
        if: matrix.run-tests && env.GODOT_TEST_VERSION == 'master'
        run: |
          chmod +x ./godot-artifacts/godot.linuxbsd.editor.x86_64.mono
          echo "GODOT=$(pwd)/godot-artifacts/godot.linuxbsd.editor.x86_64.mono" >> $GITHUB_ENV

      - name: Download requested Godot version for testing
        if: matrix.run-tests && env.GODOT_TEST_VERSION != 'master'
        run: |
          wget "https://github.com/godotengine/godot-builds/releases/download/${GODOT_TEST_VERSION}/Godot_v${GODOT_TEST_VERSION}_linux.x86_64.zip" -O Godot.zip
          unzip -a Godot.zip
          chmod +x "Godot_v${GODOT_TEST_VERSION}_linux.x86_64"
          echo "GODOT=$(pwd)/Godot_v${GODOT_TEST_VERSION}_linux.x86_64" >> $GITHUB_ENV

      - name: Run tests
        if: matrix.run-tests
        run: |
          $GODOT --headless --version
          cd test
          # Need to run the editor so .godot is generated... but it crashes! Ignore that :-)
          (cd project && (timeout 30 $GODOT --import --headless >/dev/null 2>&1 || true))
          ./run-tests.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error
